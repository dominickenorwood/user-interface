/* **********************************************
     Begin util.js
********************************************** */// usage: log('inside coolFunc',this,arguments);
// http://paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/
function FastClick(e) {
    "use strict";
    var t, n = this;
    this.trackingClick = !1;
    this.trackingClickStart = 0;
    this.targetElement = null;
    this.touchStartX = 0;
    this.touchStartY = 0;
    this.lastTouchIdentifier = 0;
    this.touchBoundary = 10;
    this.layer = e;
    if (!e || !e.nodeType) throw new TypeError("Layer must be a document node");
    this.onClick = function() {
        return FastClick.prototype.onClick.apply(n, arguments);
    };
    this.onMouse = function() {
        return FastClick.prototype.onMouse.apply(n, arguments);
    };
    this.onTouchStart = function() {
        return FastClick.prototype.onTouchStart.apply(n, arguments);
    };
    this.onTouchMove = function() {
        return FastClick.prototype.onTouchMove.apply(n, arguments);
    };
    this.onTouchEnd = function() {
        return FastClick.prototype.onTouchEnd.apply(n, arguments);
    };
    this.onTouchCancel = function() {
        return FastClick.prototype.onTouchCancel.apply(n, arguments);
    };
    if (FastClick.notNeeded(e)) return;
    if (this.deviceIsAndroid) {
        e.addEventListener("mouseover", this.onMouse, !0);
        e.addEventListener("mousedown", this.onMouse, !0);
        e.addEventListener("mouseup", this.onMouse, !0);
    }
    e.addEventListener("click", this.onClick, !0);
    e.addEventListener("touchstart", this.onTouchStart, !1);
    e.addEventListener("touchmove", this.onTouchMove, !1);
    e.addEventListener("touchend", this.onTouchEnd, !1);
    e.addEventListener("touchcancel", this.onTouchCancel, !1);
    if (!Event.prototype.stopImmediatePropagation) {
        e.removeEventListener = function(t, n, r) {
            var i = Node.prototype.removeEventListener;
            t === "click" ? i.call(e, t, n.hijacked || n, r) : i.call(e, t, n, r);
        };
        e.addEventListener = function(t, n, r) {
            var i = Node.prototype.addEventListener;
            t === "click" ? i.call(e, t, n.hijacked || (n.hijacked = function(e) {
                e.propagationStopped || n(e);
            }), r) : i.call(e, t, n, r);
        };
    }
    if (typeof e.onclick == "function") {
        t = e.onclick;
        e.addEventListener("click", function(e) {
            t(e);
        }, !1);
        e.onclick = null;
    }
}

window.log = function() {
    log.history = log.history || [];
    log.history.push(arguments);
    this.console && console.log(Array.prototype.slice.call(arguments));
};

(function(e) {
    e.fn.touchwipe = function(t) {
        var n = {
            min_move_x: 20,
            min_move_y: 20,
            wipeLeft: function() {},
            wipeRight: function() {},
            wipeUp: function() {},
            wipeDown: function() {},
            preventDefaultEvents: !0
        };
        t && e.extend(n, t);
        this.each(function() {
            function i() {
                this.removeEventListener("touchmove", s);
                e = null;
                r = !1;
            }
            function s(s) {
                n.preventDefaultEvents && s.preventDefault();
                if (r) {
                    var o = s.touches[0].pageX, u = s.touches[0].pageY, a = e - o, f = t - u;
                    if (Math.abs(a) >= n.min_move_x) {
                        i();
                        a > 0 ? n.wipeLeft() : n.wipeRight();
                    } else if (Math.abs(f) >= n.min_move_y) {
                        i();
                        f > 0 ? n.wipeDown() : n.wipeUp();
                    }
                }
            }
            function o(n) {
                if (n.touches.length == 1) {
                    e = n.touches[0].pageX;
                    t = n.touches[0].pageY;
                    r = !0;
                    this.addEventListener("touchmove", s, !1);
                }
            }
            var e, t, r = !1;
            "ontouchstart" in document.documentElement && this.addEventListener("touchstart", o, !1);
        });
        return this;
    };
})(jQuery);

window.location.origin || (window.location.origin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : ""));

FastClick.prototype.deviceIsAndroid = navigator.userAgent.indexOf("Android") > 0;

FastClick.prototype.deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent);

FastClick.prototype.deviceIsIOS4 = FastClick.prototype.deviceIsIOS && /OS 4_\d(_\d)?/.test(navigator.userAgent);

FastClick.prototype.deviceIsIOSWithBadTarget = FastClick.prototype.deviceIsIOS && /OS ([6-9]|\d{2})_\d/.test(navigator.userAgent);

FastClick.prototype.needsClick = function(e) {
    "use strict";
    switch (e.nodeName.toLowerCase()) {
      case "button":
      case "select":
      case "textarea":
        if (e.disabled) return !0;
        break;
      case "input":
        if (this.deviceIsIOS && e.type === "file" || e.disabled) return !0;
        break;
      case "label":
      case "video":
        return !0;
    }
    return /\bneedsclick\b/.test(e.className);
};

FastClick.prototype.needsFocus = function(e) {
    "use strict";
    switch (e.nodeName.toLowerCase()) {
      case "textarea":
        return !0;
      case "select":
        return !this.deviceIsAndroid;
      case "input":
        switch (e.type) {
          case "button":
          case "checkbox":
          case "file":
          case "image":
          case "radio":
          case "submit":
            return !1;
        }
        return !e.disabled && !e.readOnly;
      default:
        return /\bneedsfocus\b/.test(e.className);
    }
};

FastClick.prototype.sendClick = function(e, t) {
    "use strict";
    var n, r;
    document.activeElement && document.activeElement !== e && document.activeElement.blur();
    r = t.changedTouches[0];
    n = document.createEvent("MouseEvents");
    n.initMouseEvent(this.determineEventType(e), !0, !0, window, 1, r.screenX, r.screenY, r.clientX, r.clientY, !1, !1, !1, !1, 0, null);
    n.forwardedTouchEvent = !0;
    e.dispatchEvent(n);
};

FastClick.prototype.determineEventType = function(e) {
    "use strict;";
    return this.deviceIsAndroid && e.tagName.toLowerCase() === "select" ? "mousedown" : "click";
};

FastClick.prototype.focus = function(e) {
    "use strict";
    var t;
    if (this.deviceIsIOS && e.setSelectionRange && e.type.indexOf("date") !== 0 && e.type !== "time") {
        t = e.value.length;
        e.setSelectionRange(t, t);
    } else e.focus();
};

FastClick.prototype.updateScrollParent = function(e) {
    "use strict";
    var t, n;
    t = e.fastClickScrollParent;
    if (!t || !t.contains(e)) {
        n = e;
        do {
            if (n.scrollHeight > n.offsetHeight) {
                t = n;
                e.fastClickScrollParent = n;
                break;
            }
            n = n.parentElement;
        } while (n);
    }
    t && (t.fastClickLastScrollTop = t.scrollTop);
};

FastClick.prototype.getTargetElementFromEventTarget = function(e) {
    "use strict";
    return e.nodeType === Node.TEXT_NODE ? e.parentNode : e;
};

FastClick.prototype.onTouchStart = function(e) {
    "use strict";
    var t, n, r;
    if (e.targetTouches.length > 1) return !0;
    t = this.getTargetElementFromEventTarget(e.target);
    n = e.targetTouches[0];
    if (this.deviceIsIOS) {
        r = window.getSelection();
        if (r.rangeCount && !r.isCollapsed) return !0;
        if (!this.deviceIsIOS4) {
            if (n.identifier === this.lastTouchIdentifier) {
                e.preventDefault();
                return !1;
            }
            this.lastTouchIdentifier = n.identifier;
            this.updateScrollParent(t);
        }
    }
    this.trackingClick = !0;
    this.trackingClickStart = e.timeStamp;
    this.targetElement = t;
    this.touchStartX = n.pageX;
    this.touchStartY = n.pageY;
    e.timeStamp - this.lastClickTime < 200 && e.preventDefault();
    return !0;
};

FastClick.prototype.touchHasMoved = function(e) {
    "use strict";
    var t = e.changedTouches[0], n = this.touchBoundary;
    return Math.abs(t.pageX - this.touchStartX) > n || Math.abs(t.pageY - this.touchStartY) > n ? !0 : !1;
};

FastClick.prototype.onTouchMove = function(e) {
    "use strict";
    if (!this.trackingClick) return !0;
    if (this.targetElement !== this.getTargetElementFromEventTarget(e.target) || this.touchHasMoved(e)) {
        this.trackingClick = !1;
        this.targetElement = null;
    }
    return !0;
};

FastClick.prototype.findControl = function(e) {
    "use strict";
    return e.control !== undefined ? e.control : e.htmlFor ? document.getElementById(e.htmlFor) : e.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea");
};

FastClick.prototype.onTouchEnd = function(e) {
    "use strict";
    var t, n, r, i, s, o = this.targetElement;
    if (!this.trackingClick) return !0;
    if (e.timeStamp - this.lastClickTime < 200) {
        this.cancelNextClick = !0;
        return !0;
    }
    this.cancelNextClick = !1;
    this.lastClickTime = e.timeStamp;
    n = this.trackingClickStart;
    this.trackingClick = !1;
    this.trackingClickStart = 0;
    if (this.deviceIsIOSWithBadTarget) {
        s = e.changedTouches[0];
        o = document.elementFromPoint(s.pageX - window.pageXOffset, s.pageY - window.pageYOffset) || o;
        o.fastClickScrollParent = this.targetElement.fastClickScrollParent;
    }
    r = o.tagName.toLowerCase();
    if (r === "label") {
        t = this.findControl(o);
        if (t) {
            this.focus(o);
            if (this.deviceIsAndroid) return !1;
            o = t;
        }
    } else if (this.needsFocus(o)) {
        if (e.timeStamp - n > 100 || this.deviceIsIOS && window.top !== window && r === "input") {
            this.targetElement = null;
            return !1;
        }
        this.focus(o);
        if (!this.deviceIsIOS4 || r !== "select") {
            this.targetElement = null;
            e.preventDefault();
        }
        return !1;
    }
    if (this.deviceIsIOS && !this.deviceIsIOS4) {
        i = o.fastClickScrollParent;
        if (i && i.fastClickLastScrollTop !== i.scrollTop) return !0;
    }
    if (!this.needsClick(o)) {
        e.preventDefault();
        this.sendClick(o, e);
    }
    return !1;
};

FastClick.prototype.onTouchCancel = function() {
    "use strict";
    this.trackingClick = !1;
    this.targetElement = null;
};

FastClick.prototype.onMouse = function(e) {
    "use strict";
    if (!this.targetElement) return !0;
    if (e.forwardedTouchEvent) return !0;
    if (!e.cancelable) return !0;
    if (!this.needsClick(this.targetElement) || this.cancelNextClick) {
        e.stopImmediatePropagation ? e.stopImmediatePropagation() : e.propagationStopped = !0;
        e.stopPropagation();
        e.preventDefault();
        return !1;
    }
    return !0;
};

FastClick.prototype.onClick = function(e) {
    "use strict";
    var t;
    if (this.trackingClick) {
        this.targetElement = null;
        this.trackingClick = !1;
        return !0;
    }
    if (e.target.type === "submit" && e.detail === 0) return !0;
    t = this.onMouse(e);
    t || (this.targetElement = null);
    return t;
};

FastClick.prototype.destroy = function() {
    "use strict";
    var e = this.layer;
    if (this.deviceIsAndroid) {
        e.removeEventListener("mouseover", this.onMouse, !0);
        e.removeEventListener("mousedown", this.onMouse, !0);
        e.removeEventListener("mouseup", this.onMouse, !0);
    }
    e.removeEventListener("click", this.onClick, !0);
    e.removeEventListener("touchstart", this.onTouchStart, !1);
    e.removeEventListener("touchmove", this.onTouchMove, !1);
    e.removeEventListener("touchend", this.onTouchEnd, !1);
    e.removeEventListener("touchcancel", this.onTouchCancel, !1);
};

FastClick.notNeeded = function(e) {
    "use strict";
    var t;
    if (typeof window.ontouchstart == "undefined") return !0;
    if (/Chrome\/[0-9]+/.test(navigator.userAgent)) {
        if (!FastClick.prototype.deviceIsAndroid) return !0;
        t = document.querySelector("meta[name=viewport]");
        if (t && t.content.indexOf("user-scalable=no") !== -1) return !0;
    }
    return e.style.msTouchAction === "none" ? !0 : !1;
};

FastClick.attach = function(e) {
    "use strict";
    return new FastClick(e);
};

if (typeof define != "undefined" && define.amd) define(function() {
    "use strict";
    return FastClick;
}); else if (typeof module != "undefined" && module.exports) {
    module.exports = FastClick.attach;
    module.exports.FastClick = FastClick;
} else window.FastClick = FastClick;

(function(e) {
    e.isScrollToFixed = function(t) {
        return !!e(t).data("ScrollToFixed");
    };
    e.ScrollToFixed = function(t, n) {
        function g() {
            s.trigger("preUnfixed.ScrollToFixed");
            T();
            s.trigger("unfixed.ScrollToFixed");
            p = -1;
            l = s.offset().top;
            c = s.offset().left;
            r.options.offsets && (c += s.offset().left - s.position().left);
            h == -1 && (h = c);
            o = s.css("position");
            i = !0;
            if (r.options.bottom != -1) {
                s.trigger("preFixed.ScrollToFixed");
                S();
                s.trigger("fixed.ScrollToFixed");
            }
        }
        function y() {
            var e = r.options.limit;
            return e ? typeof e == "function" ? e.apply(s) : e : 0;
        }
        function b() {
            return o === "fixed";
        }
        function w() {
            return o === "absolute";
        }
        function E() {
            return !b() && !w();
        }
        function S() {
            if (!b()) {
                d.css({
                    display: s.css("display"),
                    width: s.outerWidth(!0),
                    height: s.outerHeight(!0),
                    "float": s.css("float")
                });
                cssOptions = {
                    position: "fixed",
                    top: r.options.bottom == -1 ? C() : "",
                    bottom: r.options.bottom == -1 ? "" : r.options.bottom,
                    "margin-left": "0px"
                };
                r.options.dontSetWidth || (cssOptions.width = s.width());
                s.css(cssOptions);
                s.addClass("scroll-to-fixed-fixed");
                r.options.className && s.addClass(r.options.className);
                o = "fixed";
            }
        }
        function x() {
            var e = y(), t = c;
            if (r.options.removeOffsets) {
                t = 0;
                e -= l;
            }
            cssOptions = {
                position: "absolute",
                top: e,
                left: t,
                "margin-left": "0px",
                bottom: ""
            };
            r.options.dontSetWidth || (cssOptions.width = s.width());
            s.css(cssOptions);
            o = "absolute";
        }
        function T() {
            if (!E()) {
                p = -1;
                d.css("display", "none");
                s.css({
                    width: "",
                    position: u,
                    left: "",
                    top: f.top,
                    "margin-left": ""
                });
                s.removeClass("scroll-to-fixed-fixed");
                r.options.className && s.removeClass(r.options.className);
                o = null;
            }
        }
        function N(e) {
            if (e != p) {
                s.css("left", c - e);
                p = e;
            }
        }
        function C() {
            var e = r.options.marginTop;
            return e ? typeof e == "function" ? e.apply(s) : e : 0;
        }
        function k() {
            if (!e.isScrollToFixed(s)) return;
            var t = i;
            i || g();
            var n = e(window).scrollLeft(), o = e(window).scrollTop(), f = y();
            if (r.options.minWidth && e(window).width() < r.options.minWidth) {
                if (!E() || !t) {
                    A();
                    s.trigger("preUnfixed.ScrollToFixed");
                    T();
                    s.trigger("unfixed.ScrollToFixed");
                }
            } else if (r.options.bottom == -1) {
                if (f > 0 && o >= f - C()) {
                    if (!w() || !t) {
                        A();
                        s.trigger("preAbsolute.ScrollToFixed");
                        x();
                        s.trigger("unfixed.ScrollToFixed");
                    }
                } else if (o >= l - C()) {
                    if (!b() || !t) {
                        A();
                        s.trigger("preFixed.ScrollToFixed");
                        S();
                        p = -1;
                        s.trigger("fixed.ScrollToFixed");
                    }
                    N(n);
                } else if (!E() || !t) {
                    A();
                    s.trigger("preUnfixed.ScrollToFixed");
                    T();
                    s.trigger("unfixed.ScrollToFixed");
                }
            } else if (f > 0) if (o + e(window).height() - s.outerHeight(!0) >= f - (C() || -L())) {
                if (b()) {
                    A();
                    s.trigger("preUnfixed.ScrollToFixed");
                    u === "absolute" ? x() : T();
                    s.trigger("unfixed.ScrollToFixed");
                }
            } else {
                if (!b()) {
                    A();
                    s.trigger("preFixed.ScrollToFixed");
                    S();
                }
                N(n);
                s.trigger("fixed.ScrollToFixed");
            } else N(n);
        }
        function L() {
            return r.options.bottom ? r.options.bottom : 0;
        }
        function A() {
            var e = s.css("position");
            e == "absolute" ? s.trigger("postAbsolute.ScrollToFixed") : e == "fixed" ? s.trigger("postFixed.ScrollToFixed") : s.trigger("postUnfixed.ScrollToFixed");
        }
        var r = this;
        r.$el = e(t);
        r.el = t;
        r.$el.data("ScrollToFixed", r);
        var i = !1, s = r.$el, o, u, f, l = 0, c = 0, h = -1, p = -1, d = null, v, m, O = function(e) {
            if (s.is(":visible")) {
                i = !1;
                k();
            }
        }, M = function(e) {
            k();
        }, _ = function() {
            var e = document.body;
            if (document.createElement && e && e.appendChild && e.removeChild) {
                var t = document.createElement("div");
                if (!t.getBoundingClientRect) return null;
                t.innerHTML = "x";
                t.style.cssText = "position:fixed;top:100px;";
                e.appendChild(t);
                var n = e.style.height, r = e.scrollTop;
                e.style.height = "3000px";
                e.scrollTop = 500;
                var i = t.getBoundingClientRect().top;
                e.style.height = n;
                var s = i === 100;
                e.removeChild(t);
                e.scrollTop = r;
                return s;
            }
            return null;
        }, D = function(e) {
            e = e || window.event;
            e.preventDefault && e.preventDefault();
            e.returnValue = !1;
        };
        r.init = function() {
            r.options = e.extend({}, e.ScrollToFixed.defaultOptions, n);
            r.$el.css("z-index", r.options.zIndex);
            d = e("<div />");
            o = s.css("position");
            u = s.css("position");
            f = e.extend({}, s.offset());
            E() && r.$el.after(d);
            e(window).bind("resize.ScrollToFixed", O);
            e(window).bind("scroll.ScrollToFixed", M);
            r.options.preFixed && s.bind("preFixed.ScrollToFixed", r.options.preFixed);
            r.options.postFixed && s.bind("postFixed.ScrollToFixed", r.options.postFixed);
            r.options.preUnfixed && s.bind("preUnfixed.ScrollToFixed", r.options.preUnfixed);
            r.options.postUnfixed && s.bind("postUnfixed.ScrollToFixed", r.options.postUnfixed);
            r.options.preAbsolute && s.bind("preAbsolute.ScrollToFixed", r.options.preAbsolute);
            r.options.postAbsolute && s.bind("postAbsolute.ScrollToFixed", r.options.postAbsolute);
            r.options.fixed && s.bind("fixed.ScrollToFixed", r.options.fixed);
            r.options.unfixed && s.bind("unfixed.ScrollToFixed", r.options.unfixed);
            r.options.spacerClass && d.addClass(r.options.spacerClass);
            s.bind("resize.ScrollToFixed", function() {
                d.height(s.height());
            });
            s.bind("scroll.ScrollToFixed", function() {
                s.trigger("preUnfixed.ScrollToFixed");
                T();
                s.trigger("unfixed.ScrollToFixed");
                k();
            });
            s.bind("detach.ScrollToFixed", function(t) {
                D(t);
                s.trigger("preUnfixed.ScrollToFixed");
                T();
                s.trigger("unfixed.ScrollToFixed");
                e(window).unbind("resize.ScrollToFixed", O);
                e(window).unbind("scroll.ScrollToFixed", M);
                s.unbind(".ScrollToFixed");
                r.$el.removeData("ScrollToFixed");
            });
            O();
        };
        r.init();
    };
    e.ScrollToFixed.defaultOptions = {
        marginTop: 0,
        limit: 0,
        bottom: -1,
        zIndex: 1e3
    };
    e.fn.scrollToFixed = function(t) {
        return this.each(function() {
            new e.ScrollToFixed(this, t);
        });
    };
})(jQuery);